APP_ENV=dev
APP_DEBUG=1
APP_SECRET=e77989ed21758e78331b20e477fc5582
APP_NAME=OpenSourceBikeShare
GOOGLE_ANALYTICS_ID=
#API connector used for SMS operations (connectors/ directory); empty to disable SMS system, "loopback" to simulate dummy gateway API for testing
SMS_CONNECTOR=disabled
#json string for configuration of sms service
SMS_CONNECTOR_CONFIG="
    {
        \"disabled\": {
            \"debug\": true
        },
        \"loopback\": {
            \"debug\": true
        },
        \"debug\": {
            \"debug\": true
        }
    }
"
SENTRY_DSN=
#false = no notification send to users (when admins get notified)
#true = notification messages sent to users as well
NOTIFY_USER_ABOUT_LONG_RENTAL=false
DB_DATABASE=
DB_HOST=
DB_USER=
DB_PASSWORD=
DB_DSN="mysql:host=${DB_HOST};dbname=${DB_DATABASE};charset=utf8"
SMTP_HOST=
SMTP_PORT=465
SMTP_USER=
SMTP_PASSWORD=
SMTP_DEBUG_LEVEL=0
SMTP_FROM_EMAIL=
CREDIT_SYSTEM_ENABLED=false
CREDIT_SYSTEM_CURRENCY=â‚¬
#minimum credit required to allow any bike operations
CREDIT_SYSTEM_MIN_BALANCE=2
#rental fee (after WATCHES_FREE_TIME)
CREDIT_SYSTEM_RENTAL_FEE=2
#0 = disabled,
#1 = charge flat price CREDIT_SYSTEM_RENTAL_FEE every WATCHES_FLAT_PRICE_CYCLE minutes
#2 = charge doubled price CREDIT_SYSTEM_RENTAL_FEE every WATCHES_DOUBLE_PRICE_CYCLE minutes
CREDIT_SYSTEM_PRICE_CYCLE=0
#long rental fee (WATCHES_LONG_RENTAL time)
CREDIT_SYSTEM_LONG_RENTAL_FEE=5
#credit needed to temporarily increase limit, applicable only when USER_BIKE_LIMIT_INCREASE > 0
CREDIT_SYSTEM_LIMIT_INCREASE_FEE=10
#credit deduction for rule violations (applied by admins)
CREDIT_SYSTEM_VIOLATION_FEE=5
#false = allow renting any bike at stand
#true = allow renting last bicycle returned only (top of stack)
FORCE_STACK=false
#notification email for notifications such as notes etc., blank if notifications not required
WATCHES_EMAIL=email@example.com
#0 - do not watch stack
#1 - notify if other than the top of the stack bike is rented from a stand (independent from FORCESTACK)
WATCHES_STACK=1
#in hours (bike rented for more than X h)
WATCHES_LONG_RENTAL=24
#in hours (high number of rentals by one person in a short time)
WATCHES_TIME_TOO_MANY=1
#if userlimit+numbertooomany reached in timetoomany, then notify
WATCHES_NUMBER_TOO_MANY=1
#in minutes (rental changes from free to paid after this time and CREDIT_SYSTEM_RENTAL_FEE is deducted)
WATCHES_FREE_TIME=30
#in minutes (uses flat price CREDIT_SYSTEM_RENTAL_FEE every WATCHES_FLAT_PRICE_CYCLE minutes after first paid period, i.e. WATCHES_FREE_TIME * 2)
WATCHES_FLAT_PRICE_CYCLE=60
#in minutes (doubles the rental price CREDIT_SYSTEM_RENTAL_FEE every WATCHES_DOUBLE_PRICE_CYCLE minutes after first paid period, i.e. WATCHES_FREE_TIME * 2)
WATCHES_DOUBLE_PRICE_CYCLE=60
#number of cycles after doubling of rental price CREDIT_SYSTEM_RENTAL_FEE is capped and stays flat (but reached cycle multiplier still applies)
WATCHES_DOUBLE_PRICE_CYCLE_CAP=3
CITIES="
    {
        \"Bratislava\": [48.148154, 17.117232]
    }
"
#international dialing code (country code prefix), no plus sign
COUNTRY_CODE=421
SYSTEM_ZOOM=15
SYSTEM_RULES=http://example.com/rules.htm
#number of bikes user can rent after he registered: 0 = no bike, 1 = 1 bike etc.
USER_BIKE_LIMIT_AFTER_REGISTRATION=0
#allow more bike rentals in addition to user limit: 0 = not allowed, otherwise: temporary limit increase - number of bikes
USER_BIKE_LIMIT_INCREASE=0
#tokens for service API access, empty to disable API access {"<some_token>": "<some_service_name>"}
SERVICE_API_TOKENS={}