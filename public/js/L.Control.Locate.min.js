L.Control.Locate = L.Control.extend({
    options: {
        position: "topleft",
        icon: "fa fa-location-arrow",
        iconLoading: "fa fa-spinner fa-spin",
        title: "Show me where I am",
        locateOptions: {
            enableHighAccuracy: true,
            watch: false,
            setView: true,
            maxZoom: 16
        },
        onLocationError: (err) => alert(err.message),
        onLocationOutsideMapBounds: () => alert("You seem to be outside the map bounds."),
    },

    onAdd(map) {
        this._map = map;
        this._active = false;

        this._container = L.DomUtil.create("div", "leaflet-control-locate leaflet-bar leaflet-control");

        this._button = L.DomUtil.create("a", "leaflet-bar-part leaflet-bar-part-single", this._container);
        this._button.title = this.options.title;
        this._icon = L.DomUtil.create("span", this.options.icon, this._button);

        L.DomEvent
            .on(this._button, "click", L.DomEvent.stop)
            .on(this._button, "click", this._onClick, this);

        return this._container;
    },

    _onClick() {
        if (this._active) {
            this._deactivate();
        } else {
            this._activate();
        }
    },

    _activate() {
        this._active = true;
        this._setIcon(true);

        this._map.on("locationfound", this._onLocationFound, this);
        this._map.on("locationerror", this._onLocationError, this);

        this._map.locate(this.options.locateOptions);
    },

    _deactivate() {
        this._active = false;
        this._setIcon(false);

        this._map.stopLocate();
        this._map.off("locationfound", this._onLocationFound, this);
        this._map.off("locationerror", this._onLocationError, this);

        if (this._marker) {
            this._map.removeLayer(this._marker);
            this._marker = null;
        }

        if (this._circle) {
            this._map.removeLayer(this._circle);
            this._circle = null;
        }
    },

    _onLocationFound(e) {
        const radius = e.accuracy;

        if (this._marker) {
            this._marker.setLatLng(e.latlng);
            this._circle.setLatLng(e.latlng).setRadius(radius);
        } else {
            this._marker = L.marker(e.latlng).addTo(this._map);
            this._circle = L.circle(e.latlng, {
                radius,
                color: "#136AEC",
                fillColor: "#136AEC",
                fillOpacity: 0.15,
                weight: 0
            }).addTo(this._map);
        }

        if (this.options.locateOptions.setView) {
            this._map.setView(e.latlng, this._map.getZoom() || 16);
        }
    },

    _onLocationError(e) {
        this._deactivate();
        this.options.onLocationError(e);
    },

    _setIcon(loading) {
        this._icon.className = loading ? this.options.iconLoading : this.options.icon;
    }
});

L.control.locate = (options) => new L.Control.Locate(options);
